/*
 * Logos.h
 *
 *  Created on: Jul 3, 2020
 *      Author: glozanoa
 */

#include <vector>
#include <string>
#include <random>
#include <ctime>

#ifndef INCLUDE_LOGOS_H_
#define INCLUDE_LOGOS_H_

using namespace std;

class Logo
{
protected:
	vector<string> *logos;

public:
	Logo();
	string getRandomLogo();
};

Logo::Logo()
{
	logos = new vector<string>;

	//correct output with cout
	string raw_logo = R"(
        	    __    __           __     _            __                               
    		   / /_  / /___ ______/ /__  (_)___ ______/ /__   ____ _____ _____ ___  ___ 
    		  / __ \/ / __ `/ ___/ //_/ / / __ `/ ___/ //_/  / __ `/ __ `/ __ `__ \/ _ \
    		 / /_/ / / /_/ / /__/ ,<   / / /_/ / /__/ ,<    / /_/ / /_/ / / / / / /  __/
    		/_.___/_/\__,_/\___/_/|_|_/ /\__,_/\___/_/|_|   \__, /\__,_/_/ /_/ /_/\___/ 
    				       /___/                   /____/ 
)";
	logos->push_back(raw_logo);

	//correct output with cout
	raw_logo = R"(
		    ___       ___       ___       ___       ___       ___       ___   	  ___       ___   
		   /\  \     /\__\     /\  \     /\  \     /\__\     /\  \     /\  \     /\  \     /\__\  	   
		  /::\  \   /:/  /    /::\  \   /::\  \   /:/ _/_   _\:\  \   /::\  \	/::\  \   /:/ _/_  
		 /::\:\__\ /:/__/    /::\:\__\ /:/\:\__\ /::-"\__\ /\/::\__\ /::\:\__\ /:/\:\__\ /::-"\__\
		 \:\::/  / \:\  \    \/\::/  / \:\ \/__/ \;:;-",-" \::/\/__/ \/\::/  / \:\ \/__/ \;:;-",-"
		  \::/  /   \:\__\     /:/  /   \:\__\    |:|  |    \/__/      /:/  /	\:\__\    |:|  |   
		   \/__/     \/__/     \/__/     \/__/     \|__|               \/__/	 \/__/     \|__|
		
						    ___       ___       ___       ___   
						   /\  \     /\  \     /\__\     /\  \  
						  /::\  \   /::\  \   /::L_L_   /::\  \ 
						 /:/\:\__\ /::\:\__\ /:/L:\__\ /::\:\__\
						 \:\:\/__/ \/\::/  / \/_/:/  / \:\:\/  /
						  \::/  /    /:/  /    /:/  /   \:\/  / 
						   \/__/     \/__/     \/__/     \/__/  
	)";

	logos->push_back(raw_logo);

	raw_logo = R"(
			______ ______            ______ ________             ______  
			___  /____  /_____ _________  /_______(_)_____ _________  /__
			__  __ \_  /_  __ `/  ___/_  //_/____  /_  __ `/  ___/_  //_/
			_  /_/ /  / / /_/ // /__ _  ,<  ____  / / /_/ // /__ _  ,<   
			/_.___//_/  \__,_/ \___/ /_/|_| ___  /  \__,_/ \___/ /_/|_|  
							/___/                        
											
						_______ ______ _______ ________ 
						__  __ `/  __ `/_  __ `__ \  _ \
						_  /_/ // /_/ /_  / / / / /  __/
						_\__, / \__,_/ /_/ /_/ /_/\___/ 
						/____/                          
)";

	logos->push_back(raw_logo);

	raw_logo = R"(
			 _     _            _     _            _    
			| |__ | | __ _  ___| | __(_) __ _  ___| | __
			| '_ \| |/ _` |/ __| |/ /| |/ _` |/ __| |/ /
			| |_) | | (_| | (__|   < | | (_| | (__|   < 
			|_.__/|_|\__,_|\___|_|\_\/ |\__,_|\___|_|\_\
						|__/
)";

	logos->push_back(raw_logo);

	raw_logo = R"(
			 _     _             _      _             _     
			| |   | |           | |    (_)           | |    
			| | _ | | ____  ____| |  _  _  ____  ____| |  _ 
			| || \| |/ _  |/ ___) | / )| |/ _  |/ ___) | / )
			| |_) ) ( ( | ( (___| |< ( | ( ( | ( (___| |< ( 
			|____/|_|\_||_|\____)_| \_)| |\_||_|\____)_| \_)
						  (__/                   
				
						  ____  ____ ____   ____ 
						 / _  |/ _  |    \ / _  )
						( ( | ( ( | | | | ( (/ / 
						 \_|| |\_||_|_|_|_|\____)
						(_____|
	)";

	logos->push_back(raw_logo);
}

string Logo::getRandomLogo()
{

	srand(time(NULL));

	int idx_logo = rand() % logos->size();

	return logos->at(idx_logo);
}


#endif /* INCLUDE_LOGOS_H_ */
